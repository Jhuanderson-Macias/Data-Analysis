nodes.info <-
do.call("rbind",
lapply(data$nodes, data.frame))
head(nodes.info)
months <- unique(nodes.info$month)
months
table(nodes.info$month)
# Using the aggregate function,
# compute the data frame for the total players joining each month. Name the columns as Month and Joining.
df <- aggregate(nodes.info$joining,
by=list(nodes.info$month),
FUN = sum)
colnames(df)[colnames(df)=="Group.1"] <- "Month"
colnames(df)[colnames(df)=="x"] <- "Join"
# Using the aggregate function, compute the data frame for the total players departing each month.
# Names the columns as Month and Departing.
df2 <- aggregate(nodes.info$departing,
by=list(nodes.info$month),
FUN = sum)
colnames(df2)[colnames(df2)=="Group.1"] <- "Month"
colnames(df2)[colnames(df2)=="x"] <- "depart"
#Merge the two data frames by Month column with sort option as FALSE.
total <- merge(df,df2,by=c("Month"), sort=FALSE)
#Show month-by-month comparison of the above numbers using the Google Line chart and Google Column chart.
#Merge the two into a single chart.
Line <- gvisLineChart(total)
plot(Line)
Line <- gvisLineChart(total)
plot(Line)
Bar <- gvisBarChart(total)
plot(Bar)
Gauge <-  gvisGauge(total$depart,
options=list(min=0, max=4030, greenFrom=500,
greenTo=800, yellowFrom=300, yellowTo=500,
redFrom=0, redTo=300, width=400, height=300))
plot(Gauge)
library(googleVis)
library(RCurl)
library(RJSONIO)
# webpage <- paste0("http://powerful-meadow-8588.herokuapp.com/",
#          "data/12months_departures_joiners.json", sep="")
#
# data <- fromJSON(getURL(webpage))
##
# save(data, file="glitch1.RData")
load(file="glitch1.RData")
##
nodes.info <-
do.call("rbind",
lapply(data$nodes, data.frame))
head(nodes.info)
months <- unique(nodes.info$month)
months
table(nodes.info$month)
# Using the aggregate function,
# compute the data frame for the total players joining each month. Name the columns as Month and Joining.
df <- aggregate(nodes.info$joining,
by=list(nodes.info$month),
FUN = sum)
colnames(df)[colnames(df)=="Group.1"] <- "Month"
colnames(df)[colnames(df)=="x"] <- "Join"
# Using the aggregate function, compute the data frame for the total players departing each month.
# Names the columns as Month and Departing.
df2 <- aggregate(nodes.info$departing,
by=list(nodes.info$month),
FUN = sum)
colnames(df2)[colnames(df2)=="Group.1"] <- "Month"
colnames(df2)[colnames(df2)=="x"] <- "depart"
#Merge the two data frames by Month column with sort option as FALSE.
total <- merge(df,df2,by=c("Month"), sort=FALSE)
#Show month-by-month comparison of the above numbers using the Google Line chart and Google Column chart.
#Merge the two into a single chart.
Line <- gvisLineChart(total)
plot(Line)
Bar <- gvisBarChart(total)
plot(Bar)
#Show the Google Gauge chart with default options for
#the monthly departing data. Use the range from 0 to 4030.
Gauge <-  gvisGauge(total$depart,
options=list(min=0, max=4030, greenFrom=500,
greenTo=800, yellowFrom=300, yellowTo=500,
redFrom=0, redTo=300, width=400, height=300))
plot(Gauge)
total
library(googleVis)
library(RCurl)
library(RJSONIO)
# webpage <- paste0("http://powerful-meadow-8588.herokuapp.com/",
#          "data/12months_departures_joiners.json", sep="")
#
# data <- fromJSON(getURL(webpage))
##
# save(data, file="glitch1.RData")
load(file="glitch1.RData")
##
nodes.info <-
do.call("rbind",
lapply(data$nodes, data.frame))
head(nodes.info)
months <- unique(nodes.info$month)
months
table(nodes.info$month)
# Using the aggregate function,
# compute the data frame for the total players joining each month. Name the columns as Month and Joining.
df <- aggregate(nodes.info$joining,
by=list(nodes.info$month),
FUN = sum)
colnames(df)[colnames(df)=="Group.1"] <- "Month"
colnames(df)[colnames(df)=="x"] <- "Join"
# Using the aggregate function, compute the data frame for the total players departing each month.
# Names the columns as Month and Departing.
df2 <- aggregate(nodes.info$departing,
by=list(nodes.info$month),
FUN = sum)
colnames(df2)[colnames(df2)=="Group.1"] <- "Month"
colnames(df2)[colnames(df2)=="x"] <- "depart"
#Merge the two data frames by Month column with sort option as FALSE.
total <- merge(df,df2,by=c("Month"), sort=FALSE)
#Show month-by-month comparison of the above numbers using the Google Line chart and Google Column chart.
#Merge the two into a single chart.
Line <- gvisLineChart(total)
plot(Line)
Bar <- gvisBarChart(total)
plot(Bar)
#Show the Google Gauge chart with default options for
#the monthly departing data. Use the range from 0 to 4030.
Gauge <-  gvisGauge(total$depart,
options=list(min=0, max=4030, greenFrom=500,
greenTo=800, yellowFrom=300, yellowTo=500,
redFrom=0, redTo=300, width=400, height=300))
plot(Gauge)
Gaug2e <-  gvisGauge(total$depart,
options=list(min=0, max=4030, greenFrom=500,
greenTo=800, yellowFrom=300, yellowTo=500,
redFrom=0, redTo=300, width=400, height=300))
plot(Gaug2e)
Gaug2e <-  gvisGauge(total$depart,
options=list(min=0, max=4030, greenFrom=500,
greenTo=800, yellowFrom=300, yellowTo=500,
redFrom=0, redTo=300, width=400, height=300))
plot(Gaug2e)
Gaug2e <-  gvisGauge(total$depart,
options=list(min=0, max=4030, greenFrom=500,
greenTo=800, yellowFrom=300, yellowTo=500,
redFrom=0, redTo=300, width=400, height=300))
plot(Gaug2e)
Gauge <-  gvisGauge(total$depart,
options=list(min=0, max=4030, greenFrom=500,
greenTo=800, yellowFrom=300, yellowTo=500,
redFrom=0, redTo=300, width=400, height=300))
Gauge <-  gvisGauge(total,
options=list(min=0, max=4030, greenFrom=500,
greenTo=800, yellowFrom=300, yellowTo=500,
redFrom=0, redTo=300, width=400, height=300))
plot(Gauge)
gaugedata <- c('month','depart')
gaugedata <- total(gaugedata)
gaugedata <- c('month','depart')
gaugedata <- total[gaugedata]
total
gaugedata <- c('Month','depart')
gaugedata <- total[gaugedata]
Gauge <-  gvisGauge(gaugedata,
options=list(min=0, max=4030, greenFrom=500,
greenTo=800, yellowFrom=300, yellowTo=500,
redFrom=0, redTo=300, width=400, height=300))
plot(Gauge)
Gauge <-  gvisGauge(gaugedata,
options=list(min=0, max=4030, greenFrom=1,
greenTo=1000, yellowFrom=1000, yellowTo=2000,
redFrom=2000, redTo=4030, width=400, height=300))
plot(Gauge)
library(SportsAnalytics)
nba0708 <- fetch_NBAPlayerStatistics("13-14")
library(SportsAnalytics)
nba0708 <- fetch_NBAPlayerStatistics("07-08")
library(SportsAnalytics)
install.packages('SportsAnalytics')
nba0708 <- fetch_NBAPlayerStatistics("13-14")
library(SportsAnalytics)
nba0708 <- fetch_NBAPlayerStatistics("13-14")
nba0708
library(SportsAnalytics)
nba1314 <- fetch_NBAPlayerStatistics("13-14")
nba1314$percentage <- nba1314$FieldGoalsMade /nba1314$FieldGoalsAttempted
nba1314$percentage
newdata <- mtcars[order(percentage),]
newdata <- nba1314[order(percentage),]
nba1314$percentage <- nba1314$FieldGoalsMade /nba1314$FieldGoalsAttempted
newdata <- nba1314[order(percentage),]
nba1314[order(percentage),]
library(SportsAnalytics)
nba1314 <- fetch_NBAPlayerStatistics("13-14")
#Which player has the best field point percentage?
nba1314$percentage <- nba1314$FieldGoalsMade /nba1314$FieldGoalsAttempted
nba1314[order(percentage),]
newdata <- nba1314[order(percentage),]
newdata <- nba1314[order(PersonalFouls),]
newdata <- nba1314[order(nba1314$PersonalFouls),]
nba1314 <- nba1314[order(nba1314$PersonalFouls),]
nba1314
library(SportsAnalytics)
nba1314 <- fetch_NBAPlayerStatistics("13-14")
#Which player has the best field point percentage?
nba1314$percentage <- nba1314$FieldGoalsMade /nba1314$FieldGoalsAttempted
nba1314 <- nba1314[order(nba1314$percentage),]
nba1314
library(SportsAnalytics)
nba1314 <- fetch_NBAPlayerStatistics("13-14")
#Which player has the best field point percentage?
nba1314$percentage <- nba1314$FieldGoalsMade /nba1314$FieldGoalsAttempted
nba1314 <- nba1314[order(-nba1314$percentage),]
nba1314
nba1314$Name
nba1314$Name(2)
nba1314$Name[2]
nba1314$Name[1,2]
nba1314$Name[1],nba1314$Name[2]
nba1314$percentageFT <- nba1314$FreeThrowsMade /nba1314$FreeThrowsAttempted
nba1314 <- nba1314[order(-nba1314$percentageFT),]
nba1314
subset(nba1314,percentageFT==1)
FT <- subset(nba1314,percentageFT==1)
FT$Name
nba1314
nba1314$percentagethree <- nba1314$ThreesMade /nba1314$ThreesAttempted
nba1314 <- nba1314[order(-nba1314$percentagethree),]
nba1314
nba1314$percentagethree <- nba1314$ThreesMade /nba1314$ThreesAttempted
nba1314 <- nba1314[order(-nba1314$percentagethree),]
three <- subset(nba1314,percentagepercentagethree==1)
three$Name
nba1314$percentagethree <- nba1314$ThreesMade /nba1314$ThreesAttempted
nba1314 <- nba1314[order(-nba1314$percentagethree),]
three <- subset(nba1314,percentagepercentagethree==1)
three <- subset(nba1314,percentagethree==1)
three$Name
nba1314$percentagethree <- nba1314$ThreesMade /nba1314$ThreesAttempted
nba1314 <- nba1314[order(-nba1314$percentagethree),]
nba1314
three$Name
table(nba1314$TotalPoints)
nba1314$Name[1]
nba1314$Name[2]
FT$Name
three$Name
table(nba1314$TotalPoints)
plot(ba1314$TotalPoints)
hplot(ba1314$TotalPoints)
hist(ba1314$TotalPoints)
hist(nba1314$TotalPoints)
plot(nba1314$TotalPoints)
hist(nba1314$TotalPoints)
nba1314 <- nba1314[order(-nba1314$TotalPoints),]
nba1314 <- nba1314[order(-nba1314$TotalPoints),]
Top<- nba1314 %>% slice(c(1:10))
nba1314 <- nba1314[order(-nba1314$TotalPoints),]
Top<- nba1314 %>% slice(c(1:10))
c(1:10)
Top<-  slice(nba1314,c(1:10))
library(dplyr)
nba1314 <- nba1314[order(-nba1314$TotalPoints),]
Top<-  slice(nba1314,c(1:10))
Top
Line <- gvisLineChart(nba1314)
plot(Line)
nba1314Three<- c(nba1314$Name, nba1314$TotalPoints)
Line <- gvisLineChart(nba1314Three)
plot(Line)
nba1314Three<- c(nba1314$Name, nba1314$TotalPoints)
nba1314Three
nba1314Three<- cbind(nba1314$Name, nba1314$TotalPoints)
v
nba1314Three
nba1314Three<- cbind(Top$Name, Top$TotalPoints)
Line <- gvisLineChart(nba1314Three)
plot(Line)
cbind(Top$Name, Top$TotalPoints)
nba1314Three<- cbind(Top$Name, Top$TotalPoints)
Line <- gvisLineChart(nba1314Three)
nba1314Three<- cbind(Top$Name, Top$TotalPoints)
Line <- gvisLineChart(nba1314Three)
plot(nba1314Three)
cbind(Top$Name, Top$TotalPoints)
nba1314Three
nba1314
nba1314Three<- top[c(2,21)]
nba1314Three<- Top[c(2,21)]
nba1314Three
Line <- gvisLineChart(nba1314Three)
plot(nba1314Three)
nba1314Three<- Top[c(2,21)]
Line <- gvisLineChart(nba1314Three)
plot(nba1314Three)
nba1314Three<- Top[c(2,22)]
Line <- gvisLineChart(nba1314Three)
plot(nba1314Three)
nba1314Three<- Top[c(2,20)]
Line <- gvisLineChart(nba1314Three)
plot(nba1314Three)
nba1314Three<- Top[c(2,19)]
Line <- gvisLineChart(nba1314Three)
plot(nba1314Three)
nba1314Three<- Top[c(1,2)]
Line <- gvisLineChart(nba1314Three)
plot(nba1314Three)
Bar <- gvisBarChart(total)
plot(Bar)
nba1314Three<- top[c(2,21)]
Line <- gvisLineChart(nba1314Three)
plot(nba1314Three)
nba1314Three<- top[c(2,19)]
Line <- gvisLineChart(nba1314Three)
plot(nba1314Three)
top[c(2,19)]
op[c(2,19)]
Top[c(2,19)]
Top[c(2,19)]
nba1314Three<- Top[c(2,19)]
Line <- gvisLineChart(nba1314Three)
plot(nba1314Three)
Top[c(2,19)]
nba1314Three<- Top[c(2,19)]
nba1314Three
Line <- gvisLineChart(nba1314Three)
plot(nba1314Three)
nba1314Three<- Top[c(2,21)]
Line <- gvisLineChart(nba1314Three)
nba1314Three<- Top[c(2,21)]
Line <- gvisLineChart(nba1314Three)
plot(Line)
Bar <- gvisBarChart(nba1314Three)
plot(Bar)
nba1314Three<- Top[c(2,23)]
nba1314Three<- Top[c(2,23)]
Bar <- gvisBarChart(nba1314Three)
plot(Bar)
nba1314Three<- Top[c(2,22)]
Bar <- gvisBarChart(nba1314Three)
plot(Bar)
nba1314Three
nba1314Three<- Top[c(2,26)]
Bar <- gvisBarChart(nba1314Three)
plot(Bar)
Top
nba1314Three<- Top[c(2,6)]
Bar <- gvisBarChart(nba1314Three)
plot(Bar)
Bubble <- gvisBubbleChart(Top[c(2,26)], idvar="Fruit",
xvar="Sales", yvar="Expenses",
colorvar="Year", sizevar="Profit",
options=list(
hAxis='{minValue:75, maxValue:125}'))
Bubble <- gvisBubbleChart(Top[c(2,26)], idvar="Fruit",
xvar="Sales",
colorvar="Year", sizevar="Profit",
options=list(
hAxis='{minValue:75, maxValue:125}'))
Bubble <- gvisBubbleChart(Top[c(2,26)],sizevar="Profit",
options=list(
hAxis='{minValue:75, maxValue:125}'))
Top
Combo <- gvisComboChart(Top, xvar="Name",
yvar=c("FieldGoalsMade", "FieldGoalsMade"),
options=list(seriesType="bars",
series='{1: {type:"line"}}'))
plot(Combo)
Scatter <- gvisScatterChart(Top,
options=list(
legend="none",
lineWidth=2, pointSize=0,
title="Women", vAxis="{title:'weight (lbs)'}",
hAxis="{title:'height (in)'}",
width=300, height=300))
Dashed <-  gvisLineChart(Top, xvar="Name", yvar=c("Steals","TotalRebounds"),
options=list(
series="[{color:'green', targetAxisIndex: 0,
lineWidth: 1, lineDashStyle: [2, 2, 20, 2, 20, 2]},
{color: 'blue',targetAxisIndex: 1,
lineWidth: 2, lineDashStyle: [4, 1]}]",
vAxes="[{title:'val1'}, {title:'val2'}]"
))
plot(Dashed)
Candle <- gvisCandlestickChart(Top$TotalPoints,
options=list(legend='none'))
plot(Candle)
Candle <- gvisCandlestickChart(Top$TotalPoints,
options=list(legend='none'))
plot(Candle)
Top$TotalPoints
Top$TotalPoints
Table <- gvisTable(Top,
formats=list(Value="#,###"))
plot(Table)
Table <- gvisTable(Top,
formats=list(Value="#,###"))
plot(Table)
Column <- gvisColumnChart(Top)
plot(Column)
Top
Scatter <- gvisScatterChart(Top,
options=list(
legend="none",
lineWidth=2, pointSize=0,
title="%", vAxis="{title:'weight (lbs)'}",
hAxis="{title:'height (in)'}",
width=300, height=300))
Scatter <- gvisScatterChart(Top[c2,3],
options=list(
legend="none",
lineWidth=2, pointSize=0,
title="%", vAxis="{title:'weight (lbs)'}",
hAxis="{title:'height (in)'}",
width=300, height=300))
Scatter <- gvisScatterChart(Top[c(2,3)],
options=list(
legend="none",
lineWidth=2, pointSize=0,
title="%", vAxis="{title:'weight (lbs)'}",
hAxis="{title:'height (in)'}",
width=300, height=300))
Scatter <- gvisScatterChart(Top[c(4,5)],
options=list(
legend="none",
lineWidth=2, pointSize=0,
title="%", vAxis="{title:'weight (lbs)'}",
hAxis="{title:'height (in)'}",
width=300, height=300))
Top
Scatter <- gvisScatterChart(Top[c(7,8)],
options=list(
legend="none",
lineWidth=2, pointSize=0,
title="%", vAxis="{title:'weight (lbs)'}",
hAxis="{title:'height (in)'}",
width=300, height=300))
plot(Scatter)
Scatter <- gvisScatterChart(Top[c(7,8)],
options=list(
legend="none",
lineWidth=2, pointSize=0,
title="%", vAxis="{title:'Made points'}",
hAxis="{title:'Attempts taken'}",
width=300, height=300))
plot(Scatter)
webpage <- paste0("http://www.landofbasketball.com/","championships/year_by_year.htm")
library(XML)
library(stringr)
install.packages('XML')
library(XML)
library(stringr)
webpage <- paste0("http://www.landofbasketball.com/","championships/year_by_year.htm")
data <- readHTMLTable(webpage, which = 1, stringsAsFactors=False)
library(XML)
library(stringr)
install.packages('XML')
library(XML)
data <- readHTMLTable(webpage, which = 1, stringsAsFactors=False)
data <- readHTMLTable(webpage, which = 1, stringsAsFactors=False)
library(XML)
library(stringr)
data <- readHTMLTable(webpage, which = 1, stringsAsFactors=False)
library('XML')
library(xml2)
data <- readHTMLTable(webpage, which = 1, stringsAsFactors=False)
library(XML)
install.packages("XML")
library(XML)
data <- readHTMLTable(webpage, which = 1, stringsAsFactors=False)
library(XML)
library(stringr)
webpage <- paste0("http://www.landofbasketball.com/","championships/year_by_year.htm")
data <- readHTMLTable(webpage, which = 1, stringsAsFactors=False)
library(XML)
library(stringr)
webpage <- paste0("http://www.landofbasketball.com/","championships/year_by_year.htm")
webpage
library(XML)
install.packages("XML")
library(XML)
library(XML)
library(XML)
library(XML)
library(XML)
library(XML)
library(XML)
library(XML)
library(XML)
library(XML)
library(XML)
library(XML)
library(XML)
library("XML")
library("XML")
library(stringr)
webpage <- paste0("http://www.landofbasketball.com/","championships/year_by_year.htm")
data <- readHTMLTable(webpage, which = 1, stringsAsFactors=False)
library(XML)
library(stringr)
webpage <- paste0("http://www.landofbasketball.com/","championships/year_by_year.htm")
data <- readHTMLTable(webpage, which = 1, stringsAsFactors=False)
library(XML)
install.packages("XML")
library(XML)
library(googleVis); library(XML); library(stringr)
library(httr)
library(googleVis); library(XML); library(stringr)
library(httr)
library(googleVis); library(xml); library(stringr)
library(httr)
webpage <- paste0("http://www.landofbasketball.com/","championships/year_by_year.htm")
data <- readHTMLTable(webpage, which = 1, stringsAsFactors=False)
